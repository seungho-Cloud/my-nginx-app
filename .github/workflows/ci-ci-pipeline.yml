name: CI/CD Pipeline

# main 브랜치에 푸시될 때 파이프라인을 실행합니다.
on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest # 최신 Ubuntu 환경에서 실행합니다.
    
    steps:
    - name: Checkout code # 코드를 체크아웃합니다.
      uses: actions/checkout@v2
      
    - name: Build Docker image # Docker 이미지를 빌드합니다.
      run: docker build -t my-nginx-app .

  docker_build:
    needs: build # build 작업이 완료된 후 실행됩니다.
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code # 코드를 체크아웃합니다.
      uses: actions/checkout@v2

    - name: Log in to Azure Container Registry # Azure Container Registry에 로그인합니다.
      run: |
        echo ${{ secrets.ACR_PASSWORD }} | docker login ${{ secrets.ACR_NAME }}.azurecr.io --username ${{ secrets.ACR_USERNAME }} --password-stdin
      
    - name: Build and push Docker image # Docker 이미지를 빌드하고 ACR에 푸시합니다.
      run: |
        docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/my-nginx-app:${{ github.sha }} .
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/my-nginx-app:${{ github.sha }}

  deploy:
    needs: docker_build # docker_build 작업이 완료된 후 실행됩니다.
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code # 코드를 체크아웃합니다.
      uses: actions/checkout@v2

    - name: Configure kubectl # kubectl을 설정합니다.
      uses: azure/setup-kubectl@v1
      with:
        version: 'latest'
        
    - name: Install Argo CD CLI
      run: |
        curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
        argocd version --client

    - name: Set up Kubeconfig # Kubernetes 설정 파일을 설정합니다.
      run: |
        mkdir -p $HOME/.kube # 디렉토리 생성
        echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config # Kubeconfig
    
    - name: Deploy to AKS using ArgoCD # ArgoCD를 사용하여 AKS에 배포합니다.
      run: |
        argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure
        argocd app create my-nginx-app \
          --repo https://github.com/seungho-Cloud/my-nginx-app.git \
          --path . \
          --dest-server https://kubernetes.default.svc \
          --dest-namespace default
        argocd app sync my-nginx-app
        argocd app wait my-nginx-app --health
